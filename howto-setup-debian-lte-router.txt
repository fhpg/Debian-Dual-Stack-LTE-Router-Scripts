howto setup a raspberry pi dual-stack (IPv4 and IPv6) router with LTE SIM7600G HAT on RaspiOS alias Debian stable (bullseye)

I worked several days on this to find everything out. After reading tons of posts, docs and rfcs spread over the internet, these notes are the working essence of my efforts.
The motivation of this was not only to learn a lot about networking (again - my knowledge became a bit rusted over the years), 
but also to have a router that is completely under my control and built on free software. Because I can update and maintain it myself, this is a very sustainable solution for me.
I just want to share this with you.

install raspios lite (in case of raspi v2 install arhmf version, not arm64)
copy image to sd-card via dd
optional for headless access to rpi: mount boot (fat32) partition of sd-card and touch empty file named "ssh" to have ssh console enabled
boot up and login (remotely) with pi:raspberry
change standard password for pi
optional: modify apt to use apt-cacher
optional: setup ssh authorized-keys
optional: hostnamectl set-hostname rpi1
optional: set timezone to berlin using dpkg-reconfigure tzdata
optional: run raspi-config and expand file system (from advanced options) and reboot
apt install nftables libqmi-utils dnsmasq socat
optional: apt install minicom tcpdump for analysis
disable any running dhcp client via systemctl disable dhcpcd.service
if present: also stop and disable ModemManager


create file /etc/dnsmasq.d/dnsmasq-lte.conf
# contains two gateways (tag a and b) to not interfere some clients while setting up this router
#####################################
server=208.67.222.222
server=208.67.220.220
interface=eth0
bogus-priv
dhcp-range=set:a,192.168.1.2,192.168.1.100
dhcp-range=set:b,192.168.1.101,192.168.1.199
dhcp-range=::1,constructor:eth0,ra-stateless,ra-names,15m
enable-ra
ra-param=eth0,mtu:wwan0,60
dhcp-host=XX:XX:XX:XX:XX:XX,client1,192.168.1.8
dhcp-host=XX:XX:XX:XX:XX:XX,client2,192.168.1.8
dhcp-host=XX:XX:XX:XX:XX:XX,XX:XX:XX:XX:XX:XX,laptop1,192.168.1.10
dhcp-host=XX:XX:XX:XX:XX:XX,phone1,192.168.1.12
dhcp-host=XX:XX:XX:XX:XX:XX,tablet1,192.168.1.13,set:b
dhcp-host=XX:XX:XX:XX:XX:XX,tablet2,192.168.1.14,set:b
dhcp-host=XX:XX:XX:XX:XX:XX,phone2,192.168.1.15,set:b
dhcp-host=XX:XX:XX:XX:XX:XX,printer1,192.168.1.100
dhcp-option=option6:dns-server,[::]
dhcp-option=tag:b,option:router,192.168.1.1
dhcp-option=tag:b,option:dns-server,192.168.1.1
dhcp-option=tag:a,option:router,192.168.1.7
dhcp-option=tag:a,option:dns-server,192.168.1.7
# option 26 is mtu. not necessary to be set via dhcp, it will rather be mangled by nftables
#dhcp-option=26,1430
#####################################


create file /etc/network/interfaces.d/lan
# this (dhcp serving) router should get it's own ip statically
#####################################
auto eth0
iface eth0 inet static
address 192.168.1.7/24
#####################################

use the following scripts for initialization of the modem, as well as for connection and disconnect

create file /etc/lte.config
############################
# use br0 if you set up an access point with hostap and have bridged the wlan0 with eth0
LOCIF=eth0
WWAN=wwan0
WDM=/dev/cdc-wdm0
# you may use ttyUSB2 or so if this does not work
TTY=/dev/ttyUSB3
############################

create file /opt/lte/lteinit.sh
############################
#!/bin/bash
. /etc/lte.config

function hayes {
  COMMAND=$1
  # socat works instable with ATE1
  echo 'ATE0' | socat -u STDIO $TTY,crnl,sync=1
  echo -n "$COMMAND "
  echo "$COMMAND" | socat STDIO $TTY,crnl,sync=1
}

#systemctl stop ModemManager

qmicli -p -d $WDM --wds-reset
# remove stale client-cids
qmicli -p -d $WDM --wds-noop --client-cid=17
qmicli -p -d $WDM --wds-noop --client-cid=18
qmicli -p -d $WDM --wds-noop --client-cid=19
qmicli -p -d $WDM --wds-noop --client-cid=20

if [ ! -e $TTY ] ; then
  echo "$TTY does not exist";
  exit 1;
fi

hayes 'AT'
hayes 'AT+CRESET'
while [ -e $TTY ] ; do
  echo -n "."
  sleep 2
done
while [ ! -e "/sys/class/net/$WWAN/qmi/raw_ip" ] ; do
  echo -n "*"
  sleep 2
done

while [ "$(cat /sys/class/net/$WWAN/qmi/raw_ip)" != "Y" ] ; do
  echo -n "Â°"
  ip link set $WWAN down
  echo Y > /sys/class/net/$WWAN/qmi/raw_ip
  ip link set $WWAN up
  sleep 1
done

while [ "$(qmicli -p -d $WDM --dms-get-operating-mode | grep online | wc -l)" != "1" ] ; do
  echo -n "o"
  sleep 1
done

echo "modem resetted"

hayes 'AT'

# remove all profiles from modem
echo -n "waiting for empty profile list "
while [ "$(qmicli -p -d $WDM --wds-get-profile-list=3gpp | grep "Profile list empty" )" != "Profile list empty" ] ; do
  echo -n "."
  for cmd in 'AT+CGATT=0' 'at+cgdcont=1' 'at+cgdcont=2' 'at+cgdcont=3' ; do
    hayes "$cmd"
  done
done
echo " done"

qmicli -p -d $WDM --wds-create-profile='3gpp,name=telekom,apn=internet.telekom,pdp-type=IPV4V6'

hayes 'AT+CPIN?'
# in case you have to unlock via pin
# hayes 'AT+CPIN=<place your pin here>'
# optional: remove sim lock
# hayes 'AT+CLCK="SC",0,"<place your pin here>"'
# SIM7600 AT command manual can be downloaded at simcom website

qmicli -p -d $WDM --wds-get-profile-list=3gpp
#######################################


create file /opt/lte/lteconn.sh
#######################################
#!/bin/bash
. /etc/lte.config
CONNINFO=/tmp/lteconn.txt

function hayes {
  COMMAND=$1
  echo 'ATE0' | socat -u STDIO $TTY,crnl,sync=1
  echo -n "$COMMAND "
  echo "$COMMAND" | socat STDIO $TTY,crnl,sync=1
}

ip link set $WWAN down ; ip link set $WWAN up

hayes 'AT+CGATT=1'

sleep 3

while [ "$(qmicli -p -d $WDM --nas-get-home-network | grep Description | cut -d "'" -f 2)" != "TDG" ] ; do
  echo "waiting for home network"
  sleep 1;
done

qmicli -p -d $WDM --nas-get-signal-strength
qmicli -p -d $WDM --nas-get-home-network

CID4=$(qmicli -p -d $WDM --wds-noop --client-no-release-cid | grep CID | cut -d "'" -f 2)
qmicli -p -d $WDM --wds-set-ip-family=4 --client-no-release-cid --client-cid=$CID4
HANDLE4=$(qmicli -p -d $WDM --device-open-net='net-raw-ip|net-no-qos-header' --wds-start-network='3gpp-profile=1,ip-type=4' --client-no-release-cid  --client-cid=$CID4 | grep -i 'Packet data handle' | cut -d "'" -f 2)
IP4INFO=$(qmicli -p -d $WDM --client-no-release-cid --wds-get-current-settings --client-cid=$CID4)
echo $IP4INFO
IP4=$(qmicli -p -d $WDM --client-no-release-cid --wds-get-current-settings --client-cid=$CID4 | grep 'IPv4 address' | cut -d ':' -f 2- | sed 's/ //g')
IP4MASK=$(qmicli -p -d $WDM --client-no-release-cid --wds-get-current-settings --client-cid=$CID4 | grep 'IPv4 subnet mask' | cut -d ':' -f 2- | sed 's/ //g')
IP4GW=$(qmicli -p -d $WDM --client-no-release-cid --wds-get-current-settings --client-cid=$CID4 | grep 'IPv4 gateway address' | cut -d ':' -f 2- | sed 's/ //g')
MTU=$(qmicli -p -d $WDM --client-no-release-cid --wds-get-current-settings --client-cid=$CID4 | grep 'MTU' | cut -d ':' -f 2- | sed 's/ //g')

#ip link set $LOCIF mtu $MTU
ip link set $WWAN mtu $MTU
ip addr add dev $WWAN $IP4/$IP4MASK noprefixroute
ip -4 addr show wwan0
ip route add $IP4GW dev $WWAN
ip route add default via $IP4GW dev $WWAN
ip route show

sleep 2

CID6=$(qmicli -p -d $WDM --wds-noop --client-no-release-cid | grep CID | cut -d "'" -f 2)
qmicli -p -d $WDM --wds-set-ip-family=6 --client-no-release-cid --client-cid=$CID6
HANDLE6=$(qmicli -p -d $WDM --device-open-net='net-raw-ip|net-no-qos-header' --wds-start-network='3gpp-profile=1,ip-type=6' --client-no-release-cid  --client-cid=$CID6 | grep -i 'Packet data handle' | cut -d "'" -f 2)
qmicli -p -d $WDM --client-no-release-cid --wds-get-current-settings --client-cid=$CID6
IP6=$(qmicli -p -d $WDM --client-no-release-cid --wds-get-current-settings --client-cid=$CID6 | grep 'IPv6 address' | cut -d ':' -f 2- | sed 's/ //g')
GW6NET=$(qmicli -p -d $WDM --client-no-release-cid --wds-get-current-settings --client-cid=$CID6 | grep 'IPv6 gateway address' | cut -d ':' -f 2- | sed 's/ //g')
GW6IP=$(echo $GW6NET | cut -d '/' -f 1)
IP6PFX=$(echo $GW6NET | cut -d ':' -f -4)

# route for this prefix should go to inner network, not to WAN
ip -6 addr add dev $WWAN $IP6 noprefixroute
ip -6 route add $GW6IP dev $WWAN
ip -6 route add default via $GW6IP dev $WWAN
ip -6 addr add dev $LOCIF "$IP6PFX::1/64"
ip -6 route show

echo "HANDLE4=$HANDLE4" > $CONNINFO
echo "CID4=$CID4" >> $CONNINFO
echo "HANDLE6=$HANDLE6" >> $CONNINFO
echo "CID6=$CID6" >> $CONNINFO
echo "IP4=$IP4" >> $CONNINFO
echo "IP4MASK=$IP4MASK" >> $CONNINFO
echo "IP4GW=$IP4GW" >> $CONNINFO
echo "IP6=$IP6" >> $CONNINFO
echo "GW6NET=$GW6NET" >> $CONNINFO
echo "GW6IP=$GW6IP" >> $CONNINFO
echo "IP6PFX=$IP6PFX" >> $CONNINFO
echo "MTU=$MTU" >> $CONNINFO

sysctl -w net.ipv4.conf.all.forwarding=1
sysctl -w net.ipv6.conf.all.forwarding=1

nft add table ip t1; nft 'add chain ip t1 c1 { type nat hook postrouting priority srcnat ; }'; nft add rule ip t1 c1 masquerade
MAXSEG=$(expr $MTU - 40)
nft add table inet t2; nft add chain inet t2 c1 { type filter hook forward priority mangle \; }; nft add rule inet t2 c1 tcp flags syn tcp option maxseg size set $MAXSEG
nft add table inet t3; nft add chain inet t3 c1 { type filter hook prerouting priority filter \; }
# let us count each state separately for interest
for state in new invalid untracked ; do 
  nft add rule inet t3 c1 meta iif $WWAN ct state $state counter drop
done
##################################


create file /opt/lte/ltedisconn.sh
#################################
#!/bin/bash
. /etc/lte.config
. /tmp/lteconn.txt

function hayes {
  COMMAND=$1
  echo 'ATE0' | socat -u STDIO $TTY,crnl,sync=1
  echo -n "$COMMAND "
  echo "$COMMAND" | socat STDIO $TTY,crnl,sync=1
}

qmicli -d $WDM -p --wds-stop-network=$HANDLE4 --client-cid=$CID4
qmicli -d $WDM -p --wds-stop-network=$HANDLE6 --client-cid=$CID6

hayes 'AT+CGATT=0'

ip -4 addr flush $WWAN scope global
ip -6 addr flush scope global
ip -6 route flush match "$IP6PFX::"
ip -6 route flush dev $WWAN

nft delete table ip t1
nft delete table inet t2
nft delete table inet t3
#################################

